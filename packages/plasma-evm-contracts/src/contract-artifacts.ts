
    /* eslint-disable @typescript-eslint/no-var-requires, no-empty */
    /*
    THIS FILE IS AUTOMATICALLY GENERATED.
    DO NOT EDIT.
    */

    
        let EtherToken
        try {
          EtherToken = require('../artifacts/contracts/EtherToken.sol/EtherToken.json')
        } catch {}
        

        let EpochHandler
        try {
          EpochHandler = require('../artifacts/contracts/handlers/EpochHandler.sol/EpochHandler.json')
        } catch {}
        

        let SubmitHandler
        try {
          SubmitHandler = require('../artifacts/contracts/handlers/SubmitHandler.sol/SubmitHandler.json')
        } catch {}
        

        let Layer2
        try {
          Layer2 = require('../artifacts/contracts/Layer2.sol/Layer2.json')
        } catch {}
        

        let Layer2Base
        try {
          Layer2Base = require('../artifacts/contracts/Layer2Base.sol/Layer2Base.json')
        } catch {}
        

        let Layer2Event
        try {
          Layer2Event = require('../artifacts/contracts/Layer2Event.sol/Layer2Event.json')
        } catch {}
        

        let Layer2I
        try {
          Layer2I = require('../artifacts/contracts/Layer2I.sol/Layer2I.json')
        } catch {}
        

        let Layer2Storage
        try {
          Layer2Storage = require('../artifacts/contracts/Layer2Storage.sol/Layer2Storage.json')
        } catch {}
        

        let Address
        try {
          Address = require('../artifacts/contracts/lib/Address.sol/Address.json')
        } catch {}
        

        let Address2
        try {
          Address2 = require('../artifacts/contracts/lib/Address2.sol/Address2.json')
        } catch {}
        

        let BMT
        try {
          BMT = require('../artifacts/contracts/lib/BMT.sol/BMT.json')
        } catch {}
        

        let Data
        try {
          Data = require('../artifacts/contracts/lib/Data.sol/Data.json')
        } catch {}
        

        let DSMath
        try {
          DSMath = require('../artifacts/contracts/lib/DSMath.sol/DSMath.json')
        } catch {}
        

        let Math
        try {
          Math = require('../artifacts/contracts/lib/Math.sol/Math.json')
        } catch {}
        

        let Ownable
        try {
          Ownable = require('../artifacts/contracts/lib/Ownable.sol/Ownable.json')
        } catch {}
        

        let RLP
        try {
          RLP = require('../artifacts/contracts/lib/RLP.sol/RLP.json')
        } catch {}
        

        let RLPEncode
        try {
          RLPEncode = require('../artifacts/contracts/lib/RLPEncode.sol/RLPEncode.json')
        } catch {}
        

        let Roles
        try {
          Roles = require('../artifacts/contracts/lib/Roles.sol/Roles.json')
        } catch {}
        

        let SafeMath
        try {
          SafeMath = require('../artifacts/contracts/lib/SafeMath.sol/SafeMath.json')
        } catch {}
        

        let SortitionSumTreeFactory
        try {
          SortitionSumTreeFactory = require('../artifacts/contracts/lib/SortitionSumTreeFactory.sol/SortitionSumTreeFactory.json')
        } catch {}
        

        let Import
        try {
          Import = require('../artifacts/contracts/misc/_import.sol/Import.json')
        } catch {}
        

        let Migrations
        try {
          Migrations = require('../artifacts/contracts/misc/Migrations.sol/Migrations.json')
        } catch {}
        

        let BMTMock
        try {
          BMTMock = require('../artifacts/contracts/mock/BMTMock.sol/BMTMock.json')
        } catch {}
        

        let ReceiptMock
        try {
          ReceiptMock = require('../artifacts/contracts/mock/ReceiptMock.sol/ReceiptMock.json')
        } catch {}
        

        let TransactionMock
        try {
          TransactionMock = require('../artifacts/contracts/mock/TransactionMock.sol/TransactionMock.json')
        } catch {}
        

        let RequestableI
        try {
          RequestableI = require('../artifacts/contracts/RequestableI.sol/RequestableI.json')
        } catch {}
        

        let RequestableSimpleToken
        try {
          RequestableSimpleToken = require('../artifacts/contracts/RequestableSimpleToken.sol/RequestableSimpleToken.json')
        } catch {}
        

        let ChallengerRole
        try {
          ChallengerRole = require('../artifacts/contracts/roles/ChallengerRole.sol/ChallengerRole.json')
        } catch {}
        

        let MapperRole
        try {
          MapperRole = require('../artifacts/contracts/roles/MapperRole.sol/MapperRole.json')
        } catch {}
        

        let SubmitterRole
        try {
          SubmitterRole = require('../artifacts/contracts/roles/SubmitterRole.sol/SubmitterRole.json')
        } catch {}
        

        let DAOVault
        try {
          DAOVault = require('../artifacts/contracts/stake/dao/DAOVault.sol/DAOVault.json')
        } catch {}
        

        let CoinageFactory
        try {
          CoinageFactory = require('../artifacts/contracts/stake/factory/CoinageFactory.sol/CoinageFactory.json')
        } catch {}
        

        let CoinageFactory2
        try {
          CoinageFactory2 = require('../artifacts/contracts/stake/factory/CoinageFactory2.sol/CoinageFactory2.json')
        } catch {}
        

        let AutoRefactorCoinageI
        try {
          AutoRefactorCoinageI = require('../artifacts/contracts/stake/interfaces/AutoRefactorCoinageI.sol/AutoRefactorCoinageI.json')
        } catch {}
        

        let CoinageFactoryI
        try {
          CoinageFactoryI = require('../artifacts/contracts/stake/interfaces/CoinageFactoryI.sol/CoinageFactoryI.json')
        } catch {}
        

        let DepositManagerI
        try {
          DepositManagerI = require('../artifacts/contracts/stake/interfaces/DepositManagerI.sol/DepositManagerI.json')
        } catch {}
        

        let Layer2RegistryI
        try {
          Layer2RegistryI = require('../artifacts/contracts/stake/interfaces/Layer2RegistryI.sol/Layer2RegistryI.json')
        } catch {}
        

        let PowerTONI
        try {
          PowerTONI = require('../artifacts/contracts/stake/interfaces/PowerTONI.sol/PowerTONI.json')
        } catch {}
        

        let SeigManagerI
        try {
          SeigManagerI = require('../artifacts/contracts/stake/interfaces/SeigManagerI.sol/SeigManagerI.json')
        } catch {}
        

        let Layer2Registry
        try {
          Layer2Registry = require('../artifacts/contracts/stake/Layer2Registry.sol/Layer2Registry.json')
        } catch {}
        

        let DepositManager
        try {
          DepositManager = require('../artifacts/contracts/stake/managers/DepositManager.sol/DepositManager.json')
        } catch {}
        

        let SeigManager
        try {
          SeigManager = require('../artifacts/contracts/stake/managers/SeigManager.sol/SeigManager.json')
        } catch {}
        

        let PowerTON
        try {
          PowerTON = require('../artifacts/contracts/stake/powerton/PowerTON.sol/PowerTON.json')
        } catch {}
        

        let AuthController
        try {
          AuthController = require('../artifacts/contracts/stake/tokens/AuthController.sol/AuthController.json')
        } catch {}
        

        let MinterRoleRenounceTarget
        try {
          MinterRoleRenounceTarget = require('../artifacts/contracts/stake/tokens/AuthController.sol/MinterRoleRenounceTarget.json')
        } catch {}
        

        let OwnableTarget
        try {
          OwnableTarget = require('../artifacts/contracts/stake/tokens/AuthController.sol/OwnableTarget.json')
        } catch {}
        

        let PauserRoleRenounceTarget
        try {
          PauserRoleRenounceTarget = require('../artifacts/contracts/stake/tokens/AuthController.sol/PauserRoleRenounceTarget.json')
        } catch {}
        

        let AutoRefactorCoinage
        try {
          AutoRefactorCoinage = require('../artifacts/contracts/stake/tokens/AutoRefactorCoinage.sol/AutoRefactorCoinage.json')
        } catch {}
        

        let ERC20MultiTransfer
        try {
          ERC20MultiTransfer = require('../artifacts/contracts/stake/tokens/ERC20MultiTransfer.sol/ERC20MultiTransfer.json')
        } catch {}
        

        let ERC20OnApprove
        try {
          ERC20OnApprove = require('../artifacts/contracts/stake/tokens/ERC20OnApprove.sol/ERC20OnApprove.json')
        } catch {}
        

        let MTON
        try {
          MTON = require('../artifacts/contracts/stake/tokens/MTON.sol/MTON.json')
        } catch {}
        

        let MTONMigrator
        try {
          MTONMigrator = require('../artifacts/contracts/stake/tokens/MTONMigrator.sol/MTONMigrator.json')
        } catch {}
        

        let OnApprove
        try {
          OnApprove = require('../artifacts/contracts/stake/tokens/OnApprove.sol/OnApprove.json')
        } catch {}
        

        let SeigCoinageToken
        try {
          SeigCoinageToken = require('../artifacts/contracts/stake/tokens/SeigCoinageToken.sol/SeigCoinageToken.json')
        } catch {}
        

        let SeigCoinageTokenMock
        try {
          SeigCoinageTokenMock = require('../artifacts/contracts/stake/tokens/SeigCoinageTokenMock.sol/SeigCoinageTokenMock.json')
        } catch {}
        

        let SeigToken_deprecated
        try {
          SeigToken_deprecated = require('../artifacts/contracts/stake/tokens/SeigToken_deprecated.sol/SeigToken_deprecated.json')
        } catch {}
        

        let SeigToken
        try {
          SeigToken = require('../artifacts/contracts/stake/tokens/SeigToken.sol/SeigToken.json')
        } catch {}
        

        let SwapProxy
        try {
          SwapProxy = require('../artifacts/contracts/stake/tokens/SwapProxy.sol/SwapProxy.json')
        } catch {}
        

        let TON
        try {
          TON = require('../artifacts/contracts/stake/tokens/TON.sol/TON.json')
        } catch {}
        

        let WTON
        try {
          WTON = require('../artifacts/contracts/stake/tokens/WTON.sol/WTON.json')
        } catch {}
        

    export const getContractArtifactPlasmaEvm = (name: string): any => {
      return {
        EtherToken,
EpochHandler,
SubmitHandler,
Layer2,
Layer2Base,
Layer2Event,
Layer2I,
Layer2Storage,
Address,
Address2,
BMT,
Data,
DSMath,
Math,
Ownable,
RLP,
RLPEncode,
Roles,
SafeMath,
SortitionSumTreeFactory,
Import,
Migrations,
BMTMock,
ReceiptMock,
TransactionMock,
RequestableI,
RequestableSimpleToken,
ChallengerRole,
MapperRole,
SubmitterRole,
DAOVault,
CoinageFactory,
CoinageFactory2,
AutoRefactorCoinageI,
CoinageFactoryI,
DepositManagerI,
Layer2RegistryI,
PowerTONI,
SeigManagerI,
Layer2Registry,
DepositManager,
SeigManager,
PowerTON,
AuthController,
MinterRoleRenounceTarget,
OwnableTarget,
PauserRoleRenounceTarget,
AutoRefactorCoinage,
ERC20MultiTransfer,
ERC20OnApprove,
MTON,
MTONMigrator,
OnApprove,
SeigCoinageToken,
SeigCoinageTokenMock,
SeigToken_deprecated,
SeigToken,
SwapProxy,
TON,
WTON
      }[name]
    }
    